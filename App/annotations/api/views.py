from rest_framework.decorators import api_view
from rest_framework import permissions
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view, authentication_classes, permission_classes
from django.db import IntegrityError

from .models import *
from .serializers import *

# Create your views here.

"""
{ 
  "@context": "http://www.w3.org/ns/anno.jsonld",
  "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b",
  "type": "Annotation",
  "creator" : user-id, 
  "body": [{
    "id": "http://34.125.134.88/body1",
    "type": "TextualBody",
    "value": "Nice picture"
  }],
  "target": {
    "id": "https://cmpe451-development.s3.amazonaws.com/artitem/artitem-1.png"
    "source": "http://34.125.134.88/artitems/14"
    "selector": {
      "type": "FragmentSelector",
      "conformsTo": "http://www.w3.org/TR/media-frags/",
      "value": "xywh=pixel:270,120,90,170"
   }
}
"""


#
#  POST api/v1/annotations/image/   
#  GET api/v1/annotations/image/
#  GET api/v1/annotations/image/users/<int:userid>
#  GET api/v1/annotations/image/artitems/<int:artitemid>
#  PUT api/v1/annotations/image/<int:id>
#
#
#  DELETE api/v1/annotations/<int:id>  (this endpoint can be used for both image and text annotations)
#

@swagger_auto_schema(
    method='POST',
    operation_description="Image Annotations API. This endpoint can be used to create an image annotation.",
    operation_summary="Creates an image annotation.",
    tags=['Image Annotations'],
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            "@context": openapi.Schema(type=openapi.TYPE_STRING, description='annotation context', default="http://www.w3.org/ns/anno.jsonld"),
            "id": openapi.Schema(type=openapi.TYPE_STRING, description='id generated by the frontend', default="#218d01ff-f077-4cc3-992d-1c81c426e51b"),
            "type": openapi.Schema(type=openapi.TYPE_STRING, description='type of the annotation', default="Annotation"),
            "creator": openapi.Schema(type=openapi.TYPE_STRING, description='ID of the creator user', default=1),
            "body": openapi.Schema(type=openapi.TYPE_OBJECT, description='body of the annotation', default='{"type": "TextualBody","value": "Nice picture"}'),
            "target": openapi.Schema(type=openapi.TYPE_OBJECT, description='target of the annotation', default='{"source": "https://cmpe451-development.s3.amazonaws.com/artitem/artitem-1.png","selector": {"type": "FragmentSelector","conformsTo": "http://www.w3.org/TR/media-frags/","value": "xywh=pixel:270,120,90,170"}}'),
        }),
    responses={
          status.HTTP_201_CREATED: openapi.Response(
            description="Successfully created an image annotation in the system.",
            examples={
                "application/json": [
                    {
                        "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b@9",
                        "body": [{
                            "id": "http://34.125.134.88/body1",
                            "value": "Nice picture",
                            "type": "Text",
                            "format": "text/plain",
                            "created": "2022-12-16T15:31:23.803026Z",
                            "purpose": "Commenting"
                        }],
                        "type": "Annotation",
                        "target": {
                            "id": "http://34.125.134.88/image15",
                            "source": "http://34.125.134.88/artitems/14",
                            "type": "Image",
                            "selector": {
                                "value": "xywh=pixel:270,120,90,170",
                                "type": "FragmentSelector",
                                "conformsTo": "http://www.w3.org/TR/media-frags/"
                            }
                        },
                        "creator": 1,
                        "@context": "http://www.w3.org/ns/anno.jsonld"
                    }
                ]
            }
        ),
        status.HTTP_400_BAD_REQUEST: openapi.Response(
            description="Invalid request body.",
            examples={
                "application/json": {
                    "Invalid request": "Annotation must have at least one Target."
                }
            }
        ),
    }
)
@swagger_auto_schema(
    method='GET',
    operation_description="Image Annotations API. This endpoint can be used to fetch all image annotations in the system.",
    operation_summary="Return all image annotations.",
    tags=['Image Annotations'],
    responses={
          status.HTTP_200_OK: openapi.Response(
            description="Successfully returned all the image annotations in the system",
            examples={
                "application/json": [
                    {
                        "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b@9",
                        "body": [{
                            "id": "http://34.125.134.88/body1",
                            "value": "Nice picture",
                            "type": "Text",
                            "format": "text/plain",
                            "created": "2022-12-16T15:31:23.803026Z",
                            "purpose": "Commenting"
                        }],
                        "type": "Annotation",
                        "target": {
                            "id": "http://34.125.134.88/image15",
                            "source": "http://34.125.134.88/artitems/14",
                            "type": "Image",
                            "selector": {
                                "value": "xywh=pixel:270,120,90,170",
                                "type": "FragmentSelector",
                                "conformsTo": "http://www.w3.org/TR/media-frags/"
                            }
                        },
                        "creator": 1,
                        "@context": "http://www.w3.org/ns/anno.jsonld"
                    }
                ]
            }
        ),
    }
)


@swagger_auto_schema(
    method='PUT',
    operation_description="Image Annotations API. This endpoint can be used to edit an image annotation.",
    operation_summary="Edits an image annotation.",
    tags=['Image Annotations'],
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            "@context": openapi.Schema(type=openapi.TYPE_STRING, description='annotation context', default="http://www.w3.org/ns/anno.jsonld"),
            "id": openapi.Schema(type=openapi.TYPE_STRING, description='id generated by the frontend', default="#218d01ff-f077-4cc3-992d-1c81c426e51b"),
            "type": openapi.Schema(type=openapi.TYPE_STRING, description='type of the annotation', default="Annotation"),
            "creator": openapi.Schema(type=openapi.TYPE_STRING, description='ID of the creator user', default=1),
            "body": openapi.Schema(type=openapi.TYPE_OBJECT, description='body of the annotation', default='{"type": "TextualBody","value": "Nice picture"}'),
            "target": openapi.Schema(type=openapi.TYPE_OBJECT, description='target of the annotation', default='{"source": "https://cmpe451-development.s3.amazonaws.com/artitem/artitem-1.png","selector": {"type": "FragmentSelector","conformsTo": "http://www.w3.org/TR/media-frags/","value": "xywh=pixel:270,120,90,170"}}'),
        }),
    responses={
          status.HTTP_201_CREATED: openapi.Response(
            description="Successfully created an image annotation in the system.",
            examples={
                "application/json": [
                    {
                        "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b@9",
                        "body": [{
                            "id": "http://34.125.134.88/body1",
                            "value": "Nice picture",
                            "type": "Text",
                            "format": "text/plain",
                            "created": "2022-12-16T15:31:23.803026Z",
                            "purpose": "Commenting"
                        }],
                        "type": "Annotation",
                        "target": {
                            "id": "http://34.125.134.88/image15",
                            "source": "http://34.125.134.88/artitems/14",
                            "type": "Image",
                            "selector": {
                                "value": "xywh=pixel:270,120,90,170",
                                "type": "FragmentSelector",
                                "conformsTo": "http://www.w3.org/TR/media-frags/"
                            }
                        },
                        "creator": 1,
                        "@context": "http://www.w3.org/ns/anno.jsonld"
                    }
                ]
            }
        ),
        status.HTTP_400_BAD_REQUEST: openapi.Response(
            description="Invalid request body.",
            examples={
                "application/json": {
                    "Invalid request": "There is no such annotation with the given id."
                }
            }
        ),
    }
)
@api_view(['POST', 'GET', 'PUT'])
def annotate_image(request):
    if(request.method == 'POST'):
        if('target' not in request.data):
            return Response({"Invalid request": "Annotation must have at least one Target."}, status=status.HTTP_400_BAD_REQUEST)
        # first create the selector of the target
        target_data = request.data['target']
        if('selector' not in target_data):
            return Response({"Invalid request": "Target must have a selector"}, status=status.HTTP_400_BAD_REQUEST)
        
        selector_serializer = create_selector(target_data['selector'])
        if(selector_serializer.is_valid()):
            selector = selector_serializer.save()
            # Our selector is valid, now create the Target

            target_data['selector'] = selector.id
            target_serializer = create_target(target_data)
            if(target_serializer.is_valid()):
                target = target_serializer.save()
                # Our target is valid, now create the Body
                data = request.data
                data['target'] = target.id

                if('type' not in data): type = create_or_return_type("annotation").type
                else: type = create_or_return_type(data['type'].lower()).type
                
                data['type'] = type
                try:
                    data['uuid'] = data['id']
                    data.pop('id')
                except:
                    selector.delete()
                    return Response({"Invalid request": "Annotation must have an id."}, status=status.HTTP_400_BAD_REQUEST)

                if('body'  in request.data): # annotation without body - possible
                    # create body
                    body_data = data['body'][0]  # it's a list of one element

                    body_serializer = create_body(body_data)
                    if(body_serializer.is_valid()):
                        b = body_serializer.save()
                        data['body'] = [b.id]
                    else:
                        selector.delete() # target gets deleted automatically - CASCADE
                        return Response(body_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
                
                annotation_serializer = AnnotationSerializer(data=data)
                if(annotation_serializer.is_valid()):
                    annotation_serializer.save()
                    return Response(annotation_serializer.data, status=status.HTTP_201_CREATED)
                else:
                    selector.delete() # target gets deleted automatically - CASCADE
                    return Response(annotation_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
            else:
                selector.delete()
                return Response(target_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        else:
            return Response(selector_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    elif(request.method == 'GET'):
        # return all the image annotations in the system
        imageAnnotations = Annotation.objects.filter(target__selector__type="FragmentSelector" ) # we might have to update this filter
        serializer = AnnotationSerializer(imageAnnotations, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    elif(request.method=='PUT'):
        try:
            if("@" not in request.data["id"]):
                return Response({"Invalid request": "This annotation must be created first."}, status=status.HTTP_400_BAD_REQUEST)
            id = int(request.data["id"].split("@")[1])
            imageAnnotation = Annotation.objects.get(id=id) # we might have to update this filter
        except:
            return Response({"Not Found": "There is no annotation with the given id."}, status=status.HTTP_404_NOT_FOUND)

        target_data = request.data['target']
        if('selector' not in target_data):
            return Response({"Invalid request": "Target must have a selector"}, status=status.HTTP_400_BAD_REQUEST)
        
        selector_serializer = create_selector(target_data['selector'])
        if(selector_serializer.is_valid()):
            selector = selector_serializer.save()
            # Our selector is valid, now create the Target

            target_data['selector'] = selector.id
            target_serializer = create_target(target_data)
            if(target_serializer.is_valid()):
                target = target_serializer.save()
                # Our target is valid, now create the Body
                data = request.data
                data['target'] = target.id
                
                if('type' not in data): type = create_or_return_type("annotation").type
                else: type = create_or_return_type(data['type'].lower()).type
                
                data['type'] = type
                try:
                    data['uuid'] = data['id']
                    data.pop('id')
                except:
                    selector.delete()
                    return Response({"Invalid request": "Annotation must have an id."}, status=status.HTTP_400_BAD_REQUEST)

    
                if('body'  in request.data): # annotation without body - possible
                    # create body
                    body_data = data['body'][0]
                    body_serializer = create_body(body_data)
                    if(body_serializer.is_valid()):
                        body = body_serializer.save()
                        data['body'] = [body.id]
                    else:
                        selector.delete() # target gets deleted automatically - CASCADE
                        return Response(body_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
                    
                    imageAnnotation.body.set([body])
                else:
                    imageAnnotation.body.set([]) 

                imageAnnotation.target = target
                imageAnnotation.save()
                serializer = AnnotationSerializer(imageAnnotation)
                return Response(data=serializer.data, status=status.HTTP_200_OK)
            else:
                selector.delete()
                return Response(target_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        else:
            return Response(selector_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        
    
@swagger_auto_schema(
    method='GET',
    operation_description="Image Annotations API. This endpoint can be used to get image annotations of a user by id.",
    operation_summary="Return image annotations of a user.",
    tags=['Image Annotations'],
    responses={
          status.HTTP_200_OK: openapi.Response(
            description="Successfully returned image annotations of the user.",
            examples={
                "application/json": [
                    {
                        "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b@9",
                        "body": [{
                            "id": "http://34.125.134.88/body1",
                            "value": "Nice picture",
                            "type": "Text",
                            "format": "text/plain",
                            "created": "2022-12-16T15:31:23.803026Z",
                            "purpose": "Commenting"
                        }],
                        "type": "Annotation",
                        "target": {
                            "id": "http://34.125.134.88/image15",
                            "source": "http://34.125.134.88/artitems/14",
                            "type": "Image",
                            "selector": {
                                "value": "xywh=pixel:270,120,90,170",
                                "type": "FragmentSelector",
                                "conformsTo": "http://www.w3.org/TR/media-frags/"
                            }
                        },
                        "creator": 1,
                        "@context": "http://www.w3.org/ns/anno.jsonld"
                    }
                ]
            }
        ),
        status.HTTP_404_NOT_FOUND: openapi.Response(
            description="Not found.",
            examples={
                "application/json": {
                    "Not Found": "Any annotation created by the user with given id does not exist."
                }
            }
        ),
    }
)
@api_view(['GET'])
def get_image_annotation_by_user_id(request, userid):
    imageAnnotations = Annotation.objects.filter(creator=userid) # we might have to update this filter
    if(imageAnnotations):
        serializer = AnnotationSerializer(imageAnnotations, many = True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    else:
        return Response({"Not Found": "Any annotation created by the user with given id does not exist."}, status=status.HTTP_404_NOT_FOUND)


@swagger_auto_schema(
    method='GET',
    operation_description="Image Annotations API. This endpoint can be used to get image annotations on a specific art item by id.",
    operation_summary="Return image annotations on an art item.",
    tags=['Image Annotations'],
    responses={
          status.HTTP_200_OK: openapi.Response(
            description="Successfully returned all the image annotations on the given art item.",
            examples={
                "application/json": [
                    {
                        "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b@9",
                        "body": [{
                            "id": "http://34.125.134.88/body1",
                            "value": "Nice picture",
                            "type": "Text",
                            "format": "text/plain",
                            "created": "2022-12-16T15:31:23.803026Z",
                            "purpose": "Commenting"
                        }],
                        "type": "Annotation",
                        "target": {
                            "id": "http://34.125.134.88/image15",
                            "source": "http://34.125.134.88/artitems/14",
                            "type": "Image",
                            "selector": {
                                "value": "xywh=pixel:270,120,90,170",
                                "type": "FragmentSelector",
                                "conformsTo": "http://www.w3.org/TR/media-frags/"
                            }
                        },
                        "creator": 1,
                        "@context": "http://www.w3.org/ns/anno.jsonld"
                    }
                ]
            }
        ),
        status.HTTP_404_NOT_FOUND: openapi.Response(
            description="Not found.",
            examples={
                "application/json": {
                    "Not Found": "Any annotation created by the user with given id does not exist."
                }
            }
        ),
    }
)
@api_view(['GET'])
def get_image_annotation_by_artitem_id(request, artitemid):
    imageAnnotations = Annotation.objects.filter(target__selector__type="FragmentSelector", target__source__contains="artitem-{}.png".format(artitemid)) # we might have to update this filter
    if(imageAnnotations):
        serializer = AnnotationSerializer(imageAnnotations, many = True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    else:
        return Response({"Not Found": "There is no annotation on the given art item."}, status=status.HTTP_404_NOT_FOUND)




@swagger_auto_schema(
    method='DELETE',
    operation_description="Annotations API. This endpoint can be used to delete the annotation with the given id. IDs of the annotations are in this format: #\{uuid\}@id. It's enough to provide the integer number at the end. For example, for this id (#218d01ff-f077-4cc3-992d-1c81c426e51b@23), just provide the last number 23.",
    operation_summary="Delete an annotation.",
    tags=['Image Annotations', 'Text Annotations'],
    responses={
        status.HTTP_204_NO_CONTENT: openapi.Response(
            description="Successfully deleted the annotation.",
        ),
        status.HTTP_404_NOT_FOUND: openapi.Response(
            description="Annotation cannot be found.",
            examples={
                "application/json": {"Not Found": "There is no annotation with the given id."}
            }
        ),
    }
)
@api_view(['DELETE'])
def delete_annotation_by_id(request, id):
    try:
        imageAnnotation = Annotation.objects.get(id=id) # we might have to update this filter
        imageAnnotation.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
    except Annotation.DoesNotExist:
        return Response({"Not Found": "There is no annotation with the given id."}, status=status.HTTP_404_NOT_FOUND)



def create_selector(selector_data):
    selectorType = create_or_return_selectortype("fragmentselector").selectorType
    selector_data['type'] = selectorType
    selector_serializer = AnnotationSelectorSerializer(data=selector_data)
    return selector_serializer

def create_target(target_data):
    type = create_or_return_type("image").type
    target_data['type'] = type
    target_serializer = AnnotationTargetSerializer(data=target_data)
    return target_serializer

def create_body(body_data):
    type = create_or_return_type("text")
    purpose = create_or_return_motivation("commenting")
    body_data["type"] = type.type
    body_data['purpose'] = purpose.motivation
    body_serializer = AnnotationBodySerializer(data=body_data)
    return body_serializer



@swagger_auto_schema(
    method='GET',
    operation_description="Image Annotations API. This endpoint can be used to get image annotations by a specific user on a specific art item.",
    operation_summary="Return image annotations on an art item.",
    tags=['Image Annotations'],
    responses={
          status.HTTP_200_OK: openapi.Response(
            description="Successfully returned all the image annotations on the given art item.",
            examples={
                "application/json": [
                    {
                        "id": "#218d01ff-f077-4cc3-992d-1c81c426e51b@9",
                        "body": [{
                            "id": "http://34.125.134.88/body1",
                            "value": "Nice picture",
                            "type": "Text",
                            "format": "text/plain",
                            "created": "2022-12-16T15:31:23.803026Z",
                            "purpose": "Commenting"
                        }],
                        "type": "Annotation",
                        "target": {
                            "id": "http://34.125.134.88/image15",
                            "source": "http://34.125.134.88/artitems/14",
                            "type": "Image",
                            "selector": {
                                "value": "xywh=pixel:270,120,90,170",
                                "type": "FragmentSelector",
                                "conformsTo": "http://www.w3.org/TR/media-frags/"
                            }
                        },
                        "creator": 1,
                        "@context": "http://www.w3.org/ns/anno.jsonld"
                    }
                ]
            }
        ),
        status.HTTP_404_NOT_FOUND: openapi.Response(
            description="Not found.",
            examples={
                "application/json": {
                    "Not Found": "Any annotation created by the user with given id does not exist."
                }
            }
        ),
    }
)
@api_view(['GET'])
def get_image_annotation_by_artitem_user_id(request, userid, artitemid):
    imageAnnotations = Annotation.objects.filter(creator=userid, target__selector__type="FragmentSelector", target__source__contains="artitem-{}.png".format(artitemid)) # we might have to update this filter
    if(imageAnnotations):
        serializer = AnnotationSerializer(imageAnnotations, many = True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    else:
        return Response({"Not Found": "There is no annotation on the given art item."}, status=status.HTTP_404_NOT_FOUND)

